{
  "name": "concat-stream",
  "description": "writable stream that concatenates strings or binary data and calls a callback with the result",
  "tags": [
    "stream",
    "simple",
    "util",
    "utility"
  ],
  "version": "1.3.1",
  "author": {
    "name": "Max Ogden",
    "email": "max@maxogden.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/maxogden/node-concat-stream.git"
  },
  "bugs": {
    "url": "http://github.com/maxogden/node-concat-stream/issues"
  },
  "engines": [
    "node >= 0.8.0"
  ],
  "main": "index.js",
  "scripts": {
    "test": "tape test/*.js test/server/*.js"
  },
  "license": "MIT",
  "dependencies": {
    "inherits": "~2.0.1",
    "typedarray": "~0.0.5"
  },
  "devDependencies": {
    "tape": "~2.3.2"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# concat-stream\n\nWritable stream that concatenates strings or binary data and calls a callback with the result. Not a transform stream -- more of a stream sink.\n\n[![NPM](https://nodei.co/npm/concat-stream.png)](https://nodei.co/npm/concat-stream/)\n\n[![browser support](https://ci.testling.com/maxogden/node-concat-stream.png)](https://ci.testling.com/maxogden/node-concat-stream)\n\n### examples\n\n```js\nvar concat = require('concat-stream')\nvar fs = require('fs')\n    \nvar read = fs.createReadStream('readme.md')\nvar write = concat(function(data) {})\n    \nread.pipe(write)\n```\n\nworks with arrays too!\n\n```js\nvar write = concat({ encoding: 'array' }, function(data) {})\nwrite.write([1,2,3])\nwrite.write([4,5,6])\nwrite.end()\n// data will be [1,2,3,4,5,6] in the above callback\n```\n\nworks with buffers too! can't believe the deals!\n\n```js\nvar write = concat(function(data) {})\nwrite.write(new Buffer('hello '))\nwrite.write(new Buffer('world'))\nwrite.end()\n// data will be a buffer that toString()s to 'hello world' in the above callback\n```    \n\nor if you want a Uint8Array, you can have those too!\n\n```js\nvar write = concat({ encoding: 'u8' }, function(data) {})\nvar a = new Uint8Array(3)\na[0] = 97; a[1] = 98; a[2] = 99\nwrite.write(a)\nwrite.write('!')\nwrite.end(Buffer('!!1'))\n```\n\n# methods\n\n```js\nvar concat = require('concat-stream')\n```\n\n## var writable = concat(opts={}, cb)\n\nReturn a `writable` stream that will fire `cb(data)` with all of the data that\nwas written to the stream. Data can be written to `writable` as strings,\nBuffers, arrays of byte integers, and Uint8Arrays. \n\nUse `opts.encoding` to control what format `data` should be:\n\n* string - get a string\n* buffer - get back a Buffer (this is the default encoding)\n* array - get an array of byte integers\n* uint8array, u8, uint8 - get back a Uint8Array\n\n# license\n\nMIT LICENSE\n",
  "readmeFilename": "readme.md",
  "homepage": "https://github.com/maxogden/node-concat-stream",
  "_id": "concat-stream@1.3.1",
  "dist": {
    "shasum": "8af20fd1d984326c5d979b3abded4680939a542c"
  },
  "_from": "concat-stream@~1.3.1",
  "_resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.3.1.tgz"
}
